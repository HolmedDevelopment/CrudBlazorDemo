@page "/people"
@inject HttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>Tab Title People</PageTitle>
<h1>Hello People</h1>

<table class="table">
    <thead>
        <tr>
            <th>First Name </th>
            <th>Last Name </th>
            <th>Sex</th>
            <th></th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if (people == null)
        {
            <p>No data to be fetched</p>
        }
        else
        {
            @foreach (var person in people)
            {
                <tr>
                    <td>@person.FirstName</td>
                    <td>@person.LastName</td>
                    <td>@person.Sex</td>
                    <td><button class="btn btn-primary" @onclick="(()=>NavigateToSingle(person.Id))"><i class="oi oi-pencil"></i></button></td>
                    <td><button class="btn btn-danger" @onclick="(()=>DeletePerson(person.Id))"><i class="oi oi-delete"></i></button></td>
                </tr>
            }
        }

    </tbody>
</table>
<h2><button class="btn btn-primary" @onclick="(()=>CreateSingle())"><i class="oi oi-pencil"></i></button></h2>

@code {
    private Person[]? people;

    protected override async Task OnInitializedAsync()
    {
        people = await Http.GetFromJsonAsync<Person[]>("api/people");
    }

    void NavigateToSingle(int Id)
    {
        NavigationManager.NavigateTo($"/person/{Id}");
    }
    async Task DeletePerson(int Id)
    {
        await Http.DeleteAsync($"api/people/{Id}");
        //this.StateHasChanged();
        //await InvokeAsync(() =>
        //     {
        //         StateHasChanged();
        //     });
        people = await Http.GetFromJsonAsync<Person[]>("api/people");
    }
    void CreateSingle()
    {
        NavigationManager.NavigateTo("/person");
    }
}
